import unittest

import sys
sys.path.append("./code")

from plainCode.algoritmo_v_0_1 import AgenteMalware

class TestAlgoritmo_v_0_1(unittest.TestCase):
    
    # Caso de prueba 1: recompensas entre nodos conectados
    #
    # comprobamos que se guardan las conexiones correctamente en la tabla de recompensas
    def test_conexiones(self):
        #creamos una red simple
        conexiones = [(0,1),(1,2)]
        NNODOS = 3
        meta = 0
        agente = AgenteMalware(conexiones, None, None, NNODOS)
        agente.inicializa_recompensas(meta)
        #comprobamos que las conexiones existentes tienen una penalización de -1
        self.assertEqual(agente.R[0,1], -1, "Una conexión no se ha guardado")
        self.assertEqual(agente.R[1,0], -1, "La ruta inversa de una conexión no se ha guardado")
        self.assertEqual(agente.R[1,2], -1, "Una conexión no se ha guardado")
        self.assertEqual(agente.R[2,1], -1, "La ruta inversa de una conexión no se ha guardado")
        #comprobamos que las conexiones inexistentes tienen una penalización mucho mayor
        self.assertEqual(agente.R[0,2], -111, "Se ha guardado una conexión inexistente")
        self.assertEqual(agente.R[2,0], -111, "Se ha guardado una conexión inexistente")

        #comprobamos lo mismo suponiendo que están infectados los nodos
        #comprobamos que las conexiones existentes tienen una penalización de -1
        self.assertEqual(agente.R[0+NNODOS,1], -1, "Una conexión desde un nodo infectado no se ha guardado")
        self.assertEqual(agente.R[1+NNODOS,0], -1, "Una conexión desde un nodo infectado no se ha guardado")
        self.assertEqual(agente.R[1+NNODOS,2], -1, "Una conexión desde un nodo infectado no se ha guardado")
        self.assertEqual(agente.R[2+NNODOS,1], -1, "Una conexión desde un nodo infectado no se ha guardado")
        #comprobamos que las conexiones inexistentes tienen una penalización mucho mayor
        self.assertEqual(agente.R[0+NNODOS,2], -111, "Se ha guardado una conexión inexistente")
        self.assertEqual(agente.R[2+NNODOS,0], -111, "Se ha guardado una conexión inexistente")

    # Caso de prueba 2: recompensas para nodos especiales
    #
    # Comprobamos que se guardan las características de valor y riesgo en la tabla de recompensas
    def test_riesgo_valor(self):
        #creamos una red simple
        conexiones = [(0,1),(1,2)]
        NNODOS = 3
        lista_sin_valor = [2]
        lista_alto_riesgo = [1]
        meta = 0
        agente = AgenteMalware(conexiones, lista_sin_valor, lista_alto_riesgo, NNODOS)
        agente.inicializa_recompensas(meta)
        #comprobamos que se ha reflejado en las recompensas las características de los nodos
        self.assertEqual(agente.R[0,1], -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.R[2,1], -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.R[1,2], -3, "No se ha tenido en cuenta que el nodo 2 tiene poco valor")
        self.assertEqual(agente.R[0+NNODOS,1], -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.R[2+NNODOS,1], -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.R[1+NNODOS,2], -3, "No se ha tenido en cuenta que el nodo 2 tiene poco valor")

    # Caso de prueba 3: recompensas para infección
    #
    # Comprobamos que se asigna recompensas a la infección de los nodos de forma correcta
    def test_infeccion(self):
        #creamos una red simple
        conexiones = [(0,1),(1,2)]
        NNODOS = 3
        lista_sin_valor = [2]
        lista_alto_riesgo = [1]
        meta = 0
        agente = AgenteMalware(conexiones, lista_sin_valor, lista_alto_riesgo, NNODOS)
        agente.inicializa_recompensas(meta)
        #comprobamos que al infectar nodos no objetivo, se penaliza
        self.assertTrue(agente.R[1,1+NNODOS] < 0, "Se ha tratado la infección de un nodo no objetivo como positiva cuando no lo es")
        self.assertTrue(agente.R[2,2+NNODOS] < 0, "Se ha tratado la infección de un nodo no objetivo como positiva cuando no lo es")
        #comprobamos que al infectar el nodo objetivo, se otorga una recompensa positiva
        self.assertTrue(agente.R[0,0+NNODOS] > 0, "Se ha tratado la infección del nodo objetivo como negativa cuando no lo es")

    # Caso de prueba 4: recompensas para mantenerse en el sitio
    #
    # Comprobamos que se asigna recompensas a no moverse de nodo de forma correcta
    def test_no_mover(self):
        #creamos una red simple
        conexiones = [(0,1),(1,2)]
        NNODOS = 3
        lista_sin_valor = [2]
        lista_alto_riesgo = [1]
        meta = 0
        agente = AgenteMalware(conexiones, lista_sin_valor, lista_alto_riesgo, NNODOS)
        agente.inicializa_recompensas(meta)
        #comprobamos que hay una recompensa positiva al quedarse en el nodo objetivo 
        self.assertTrue(agente.R[0+NNODOS,0+NNODOS] > 0, "Se penaliza por no moverse del nodo objetivo cuando no debería ser así")
        #comprobamos que hay una recompensa negativa al quedarse estacionado en otros nodos
        self.assertEqual(agente.R[1,1], -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.R[2,2], -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.R[1+NNODOS,1+NNODOS], -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.R[2+NNODOS,2+NNODOS], -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        #comprobamos que no se puede pasar de un nodo infectado a su versión no infectada
        self.assertEqual(agente.R[0+NNODOS,0], -111, "Se permite revertir la infección de un nodo, y no debería")
        self.assertEqual(agente.R[1+NNODOS,1], -111, "Se permite revertir la infección de un nodo, y no debería")
        self.assertEqual(agente.R[2+NNODOS,2], -111, "Se permite revertir la infección de un nodo, y no debería")


    # Caso de prueba 5: búsqueda de ruta correcto
    #
    # Comprobamos que encuentra una ruta al nodo objetivo
    def test_encuentra_ruta(self):
        #inicializamos un agente con una red simple y lo entrenamos
        conexiones = [(0,1), (1,2), (1,3), (2,4), (2,5), (3,6), (3,7), (3,8)]
        lista_sin_valor = [4,8]
        lista_alto_riesgo = [6]
        NNODOS = 9
        agente = AgenteMalware(conexiones, lista_sin_valor, lista_alto_riesgo, NNODOS)
        meta = 5
        agente.inicializa_recompensas(meta)
        gamma = 0.7
        alpha = 0.9
        agente.entrena_agente(alpha, gamma)

        #obtenemos la ruta desde el nodo 7
        inicio = 7
        ruta, puntuacion = agente.busca_ruta(inicio)

        #comprobamos que llega al destino a través de las conexiones existentes
        self.assertEqual(ruta[-1],5+NNODOS, "Ha llegado al nodo objetivo")
        for i in range(len(ruta)-1):
            self.assertNotEqual(agente.R[ruta[i],ruta[i+1]], -111, "Ha tomado un camino no permitido")
    
if __name__ == '__main__':
    unittest.main()