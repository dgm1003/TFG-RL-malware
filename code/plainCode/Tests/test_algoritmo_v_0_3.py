import unittest

import sys
sys.path.append("./code")

from plainCode.algoritmo_v_0_3 import AgenteMalware

# Tests unitarios del archivo algoritmo_v_0_3.py
#
# Author: Diego García Muñoz
# Tutores: Bruno Baruque Zanón y Roberto Carlos Casado Vara
# Trabajo Fin de Grado, Ingeniería Informática, Universidad de Burgos Curso 2022-2023
class test_algoritmo_v_0_3(unittest.TestCase):
    

    # Caso de prueba 1: generación de red
    #
    # comprobamos que se generan redes con el tamaño correcto y asignando propiedades del riesgo.
    def test_generar_red(self):
        #generamos una red de 10 nodos
        NNODOS = 10
        agente = AgenteMalware(NNODOS)
        red = agente.genera_red()
        self.assertEqual(red.number_of_nodes(), 10, "se ha generado la red con los nodos apropiados")

        #generamos la red sin nodos de riesgo
        red = agente.genera_red(ratio_riesgo=0)
        for nodo in red.nodes(data=True):
            self.assertEqual(nodo[1]["riesgo"],1, "se le ha asignado riesgo cuando no debería")
        #generamos la red con todos nodos de riesgo
        red = agente.genera_red(ratio_riesgo=1)
        for nodo in red.nodes(data=True):
            self.assertEqual(nodo[1]["riesgo"], 10, "no se le ha asignado riesgo cuando debería")
    
    # Caso de prueba 2: selección de nodos de riesgo
    #
    # comprobamos que se pueden modificar los nodos de alto riesgo correctamente.
    def test_define_alto_riesgo(self):
        #generamos una red simple
        NNODOS = 5
        agente = AgenteMalware(NNODOS)
        agente.genera_red()
        #asignamos dos nodos como de alto riesgo
        lista_riesgo = [2,4]
        agente.define_alto_riesgo(lista_riesgo)
        #comprobamos que la asignación ha sido correcta
        for i in range(NNODOS):
            if i in lista_riesgo:
                self.assertEqual(agente.grafo.nodes[i]["riesgo"], 10, "no se le ha asignado riesgo cuando debería")
            else:
                self.assertEqual(agente.grafo.nodes[i]["riesgo"], 1, "se le ha asignado riesgo cuando no debería")

    # Caso de prueba 3: recompensas entre nodos conectados
    #
    # comprobamos que se obtiene correctamente la recompensa usando el método apropiado
    def test_obtener_recompensa_conexiones(self):
        #creamos una red simple
        NNODOS = 6
        agente = AgenteMalware(NNODOS)
        agente.genera_red(seed=1) 
        # conexiones existentes: 0-1, 0-2, 0-3, 1-2, 1-3, 1-4, 2-3, 2-4, 4-5
        #comprobamos que dos de las conexiones existentes no tienen penalización máxima
        self.assertTrue(agente.obtener_recompensa(0,1) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(1,0) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(1,2) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(2,1) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        #comprobamos que las conexiones inexistentes tienen una penalización mucho mayor
        self.assertEqual(agente.obtener_recompensa(0,4), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(4,0), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(3,4), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(4,3), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")

        #comprobamos lo mismo suponiendo que están infectados los nodos
        #comprobamos que dos de las conexiones existentes no tienen penalización máxima
        self.assertTrue(agente.obtener_recompensa(0+NNODOS,1) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(1+NNODOS,0) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(1+NNODOS,2) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        self.assertTrue(agente.obtener_recompensa(2+NNODOS,1) > -111, "La recompensa de una conexión válida no se ha calculado correctamente")
        #comprobamos que las conexiones inexistentes tienen una penalización mucho mayor
        self.assertEqual(agente.obtener_recompensa(0+NNODOS,4), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(4+NNODOS,0), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(3+NNODOS,4), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")
        self.assertEqual(agente.obtener_recompensa(4+NNODOS,3), -111, "La recompensa de una conexión inválida no se ha calculado correctamente")

    # Caso de prueba 4: recompensas para nodos especiales
    #
    # Comprobamos que se guardan las características de valor y riesgo en la tabla de recompensas
    def test_obtener_recompensa_riesgo_valor(self):
        #creamos una red simple
        NNODOS = 6
        agente = AgenteMalware(NNODOS)
        agente.genera_red(seed=1) 
        lista_riesgo = [0]
        agente.define_alto_riesgo(lista_riesgo)
        # conexiones existentes: 0-1, 0-2, 0-3, 1-2, 1-3, 1-4, 2-3, 2-4, 4-5
        # nodos de poco valor: 6
        # nodos de alto riesgo: 0

        #comprobamos que se ha reflejado en las recompensas las características de los nodos
        self.assertEqual(agente.obtener_recompensa(1,0), -10, "No se ha tenido en cuenta que el nodo 0 es de alto riesgo")
        self.assertEqual(agente.obtener_recompensa(2,0), -10, "No se ha tenido en cuenta que el nodo 0 es de alto riesgo")
        self.assertEqual(agente.obtener_recompensa(3,0), -10, "No se ha tenido en cuenta que el nodo 0 es de alto riesgo")
        self.assertEqual(agente.obtener_recompensa(1+NNODOS,0), -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.obtener_recompensa(2+NNODOS,0), -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")
        self.assertEqual(agente.obtener_recompensa(3+NNODOS,0), -10, "No se ha tenido en cuenta que el nodo 1 es de alto riesgo")

        self.assertEqual(agente.obtener_recompensa(4,5), -3, "No se ha tenido en cuenta que el nodo 6 tiene poco valor")
        self.assertEqual(agente.obtener_recompensa(4+NNODOS,5), -3, "No se ha tenido en cuenta que el nodo 6 tiene poco valor")

    # Caso de prueba 5: recompensas para infección
    #
    # Comprobamos que se asigna recompensas a la infección de los nodos de forma correcta
    def test_obtener_recompensa_infeccion(self):
        #creamos una red simple
        NNODOS = 3
        agente = AgenteMalware(NNODOS)
        agente.genera_red(seed=1) #todos conectados con todos
        meta = 0
        agente.selecciona_meta(meta)
        #comprobamos que al infectar nodos no objetivo, se penaliza
        self.assertTrue(agente.obtener_recompensa(1,1+NNODOS) < 0, "Se ha tratado la infección de un nodo no objetivo como positiva cuando no lo es")
        self.assertTrue(agente.obtener_recompensa(2,2+NNODOS) < 0, "Se ha tratado la infección de un nodo no objetivo como positiva cuando no lo es")
        #comprobamos que al infectar el nodo objetivo, se otorga una recompensa positiva
        self.assertTrue(agente.obtener_recompensa(0,0+NNODOS) > 0, "Se ha tratado la infección del nodo objetivo como negativa cuando no lo es")

    # Caso de prueba 6: recompensas para mantenerse en el sitio
    #
    # Comprobamos que se asigna recompensas a no moverse de nodo de forma correcta
    def test_obtener_recompensa_no_mover(self):
        #creamos una red simple
        NNODOS = 3
        agente = AgenteMalware(NNODOS)
        agente.genera_red(seed=1) #todos conectados con todos
        meta = 0
        agente.selecciona_meta(meta)
        #comprobamos que hay una recompensa positiva al quedarse en el nodo objetivo 
        self.assertTrue(agente.obtener_recompensa(0+NNODOS,0+NNODOS) > 0, "Se penaliza por no moverse del nodo objetivo cuando no debería ser así")
        #comprobamos que hay una recompensa negativa al quedarse estacionado en otros nodos
        self.assertEqual(agente.obtener_recompensa(0,0), -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.obtener_recompensa(1,1), -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.obtener_recompensa(2,2), -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.obtener_recompensa(1+NNODOS,1+NNODOS), -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        self.assertEqual(agente.obtener_recompensa(2+NNODOS,2+NNODOS), -1, "No se penaliza por quedarse quieto en un nodo no objetivo, y debería")
        #comprobamos que no se puede pasar de un nodo infectado a su versión no infectada
        self.assertEqual(agente.obtener_recompensa(0+NNODOS,0), -111, "Se permite revertir la infección de un nodo, y no debería")
        self.assertEqual(agente.obtener_recompensa(1+NNODOS,1), -111, "Se permite revertir la infección de un nodo, y no debería")
        self.assertEqual(agente.obtener_recompensa(2+NNODOS,2), -111, "Se permite revertir la infección de un nodo, y no debería")


    # Caso de prueba 7: búsqueda de ruta correcto
    #
    # Comprobamos que encuentra una ruta al nodo objetivo
    def test_encuentra_ruta(self): 
        #inicializamos un agente con una red simple y lo entrenamos
        NNODOS = 9
        meta = 5
        agente = AgenteMalware(NNODOS)
        agente.genera_red()
        agente.selecciona_meta(meta)
        gamma = 0.7
        alpha = 0.9
        agente.entrena_agente(alpha, gamma, 1000)

        #obtenemos la ruta desde el nodo 7
        inicio = 7
        ruta, puntuacion = agente.busca_ruta(inicio)

        #comprobamos que llega al destino a través de las conexiones existentes
        self.assertEqual(ruta[-1],meta+NNODOS, "Ha llegado al nodo objetivo")
        for i in range(len(ruta)-1):
            self.assertNotEqual(agente.obtener_recompensa(ruta[i],ruta[i+1]), -111, "Ha tomado un camino no permitido")
    
if __name__ == '__main__':
    unittest.main()