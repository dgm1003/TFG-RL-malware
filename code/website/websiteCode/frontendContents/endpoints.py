from flask import Flask, render_template, request, session, redirect, url_for

from backendContents.entorno_web import Red
from backendContents.agente_web import AgenteMalware

class Endpoints():
    @staticmethod
    def home():
        session.clear()
        return render_template("home.html")

    @staticmethod
    def introduceDatosGet():
        redirect_to = url_for('inicio_metaGet')
        return render_template("introduceDatos.html", redirect_to=redirect_to) 

    @staticmethod
    def introduceDatosPost():
        nnodos = int(request.form['nnodos'])
        if request.form['seed'] == '':
            seed = None
        else:
            seed = int(request.form['seed'])
        ratio_riesgo = float(request.form['ratio_riesgo'])
        
        if 'nnodos' in session:
            print("nnodos: " + str(nnodos))
        if 'seed' in session:
            print("seed: " + str(seed))
        if 'ratio_riesgo' in session:
            print("ratio_riesgo: " + str(ratio_riesgo))

        if seed is None:
            red = Red(NNODOS=nnodos, ratio_riesgo=ratio_riesgo)
        else:
            red = Red(NNODOS=nnodos, seed=seed, ratio_riesgo=ratio_riesgo)
        
        session['red'] = red.to_json()

        redirect_to = request.form['redirect_to']
        if not redirect_to:
            redirect_to = url_for('inicio_metaGet')
        return redirect(redirect_to)

    @staticmethod
    def inicio_metaGet():
        if 'red' in session:
            redirect_to = url_for('introduceDatosEntrenamientoGet')
            red = Red(jsonSource=session["red"])
            red.render(saveAs=1)
            return render_template("inicio-meta.html", redirect_to=redirect_to, NNODOS=red.NNODOS)
        else:
            return render_template("home.html")

    @staticmethod
    def inicio_metaPost():
        if 'red' in session:
            red = Red(jsonSource=session["red"])
            red.define_inicio_meta(int(request.form["inicial"]), int(request.form["meta"]))
            
            session["red"] = red.to_json()

            redirect_to = request.form['redirect_to']
            if not redirect_to:
                redirect_to = url_for('inicio_metaGet')
            return redirect(redirect_to)
        else:
            return render_template("home.html")

    @staticmethod
    def seleccionaGrafoGet():
        redirect_to = url_for('introduceDatosEntrenamientoGet')
        return render_template("seleccionaGrafo.html", redirect_to=redirect_to) 

    @staticmethod
    def seleccionaGrafoPost():

        predefinido = int(request.form['imagen'])
        red = Red(predefinido=predefinido)
        session['red'] = red.to_json()

        redirect_to = request.form['redirect_to']
        if not redirect_to:
            redirect_to = url_for('seleccionaGrafoGet')
        return redirect(redirect_to)

    @staticmethod
    def introduceDatosEntrenamientoGet():
        if 'red' in session:

            red = Red(jsonSource=session["red"])
            print(red.NNODOS)
            
            redirect_to = url_for('muestraResultadosGet')
            return render_template("introduceDatosEntrenamiento.html", redirect_to=redirect_to)
        else:
            return render_template("home.html")

    @staticmethod
    def introduceDatosEntrenamientoPost():
        session['alpha'] = float(request.form['alpha'])
        session['gamma'] = float(request.form['gamma'])
        session['episodes'] = int(request.form['episodes'])

        redirect_to = request.form['redirect_to']
        if not redirect_to:
            redirect_to = url_for('introduceDatosEntrenamientoGet')
        return redirect(redirect_to)

    @staticmethod
    def muestraResultadosGet():
        if 'red' in session:
            red = Red(jsonSource=session["red"])
            nnodos = red.NNODOS
            inicial = red.inicial
            meta = red.meta
            
            agente = AgenteMalware(red)
            agente.entrena_agente(session['alpha'], session['gamma'], session['episodes'])
            route, reward = agente.busca_ruta()
            red.render(saveAs=2, ruta=route)
            return render_template("muestraResultados.html", nnodos=nnodos, inicial=inicial, meta=meta,
                    alpha=session['alpha'], gamma=session['gamma'], episodes=session['episodes'], 
                    route=route, reward = reward)
        else:
            return render_template("home.html")

